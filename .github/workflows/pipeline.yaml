name: Pipeline

on:
  push:
    branches:
      - "master"

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml
  TESTING_STACK_NAME: reward-monitor-dev-stack
  TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::276784125321:role/aws-sam-cli-managed-dev-pipe-PipelineExecutionRole-A4MANJZFGI32
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::276784125321:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-12NOX9L04EX01
  TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket-ruktl65kntz8
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${TESTING_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # TESTING_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  TESTING_REGION: us-east-1
  PROD_STACK_NAME: reward-monitor-prod-stack
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::318470572656:role/aws-sam-cli-managed-prod-pip-PipelineExecutionRole-1MR8MSBP7KW4L
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::318470572656:role/aws-sam-cli-managed-prod-CloudFormationExecutionR-15OLC6E2TD4U8
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline-artifactsbucket-1qnyfs2nvlwwf
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${PROD_IMAGE_REPOSITORY}" to
  # prod "sam package" and "sam deploy" commands.
  # PROD_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  PROD_REGION: us-east-1

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the tests here

  build-and-package:
    if: github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: aws-actions/setup-sam@v2

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container \
          --parameter-overrides "ParameterKey=AlchemyApiKey,ParameterValue=${{ env.ALCHEMY_API_KEY }} \
          ParameterKey=EtherscanApi,ParameterValue=${{ env.ETHERSCAN_API }}"

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  deploy-prod:
    if: github.ref == 'refs/heads/master'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: aws-actions/setup-sam@v2
      - uses: actions/download-artifact@v2
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}
            --parameter-overrides "ParameterKey=AlchemyApiKey,ParameterValue=${{ env.ALCHEMY_API_KEY }} ParameterKey=EtherscanApi,ParameterValue=${{ env.ETHERSCAN_API }}"
